/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int len = 0;
        ListNode *slow = head;
        ListNode *fast = head;
        
        while(fast and fast->next)//middle
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        if(fast!=nullptr)//odd
        {
            slow = slow->next;
        }
        
        //reverse 2nd half 
        ListNode*curr=slow;
        ListNode*prev=nullptr;
        ListNode *next;
        
        while(curr)
              {
                  next = curr->next;
                  curr->next=prev;
                  prev=curr;
                  curr=next;
              }
      
        while(prev and head)//comparing two halves
        {
            if(prev->val!=head->val)
                return false;
            prev = prev->next;
            head = head->next;
        }
        return true;
    }
};
