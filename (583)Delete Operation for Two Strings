class Solution {
public:
    // vector<vector<int>>DP;
    
    // int util(string &str1 , string &str2,int n , int m)
    // {
    //     if(n==0)    return m;
    //     if(m==0)    return n;
    //     if(DP[n][m]!=-1)    return DP[n][m];
    //     if(str1[n-1]==str2[m-1])    return DP[n][m] = util(str1,str2,n-1,m-1);
    //     else     return DP[n][m] =1+min(util(str1,str2,n-1,m),util(str1,str2,n,m-1));
    // }
    
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        vector<vector<int>>DP(n+1,vector<int>(m+1,0));    
        for(int i=0 ; i<n+1 ; i++)
        {
            for(int j=0 ; j<m+1 ; j++)
            {
                if(i==0)    DP[i][j] = j;
                else if(j==0) DP[i][j] = i;
                else if(word1[i-1]==word2[j-1]) DP[i][j] = DP[i-1][j-1];
                else    DP[i][j] = 1+min(DP[i-1][j],DP[i][j-1]);
            }
        } 
        return DP[n][m]; 
    }
};
